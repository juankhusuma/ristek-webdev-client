import Tweet from "@/components/Tweet";
import TweetForm from "@/components/TweetForm";
import { app } from "@/lib/firebase";
import { ITweet } from "@/types/tweet";
import { TweetByID } from "@/types/tweetById";
import axios from "axios";
import { getAuth } from "firebase/auth";
import Head from "next/head";
import { useRouter } from "next/router";
import { Dispatch, SetStateAction, createContext, useEffect, useState } from "react";
import { useAuthState } from "react-firebase-hooks/auth";

interface ITweetContext {
    tweets: ITweet[];
    setTweets: Dispatch<SetStateAction<ITweet[]>> | (() => any);
}

export const TweetContext = createContext<ITweetContext>({
    tweets: [],
    setTweets: () => { }
})

export default function TweetById() {
    const router = useRouter()
    const { id } = router.query
    const [data, setData] = useState<TweetByID | null>()
    const auth = getAuth(app)
    const [user] = useAuthState(auth)
    const [tweets, setTweets] = useState<any>(data?.replies || [])

    useEffect(() => {
        setData(null);
        (async () => {
            try {
                const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/tweet/${id}`, {
                    headers: { Authorization: `Bearer ${await user?.getIdToken()}` }
                })
                setData(response.data)
            } catch (err) { console.log(err) }
        })()
    }, [user, id])

    useEffect(() => setTweets(data?.replies), [data])
    return <div>
        <Head>
            <title>Tweet</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <div>
            {data &&
                <div>
                    <Tweet
                        ctx={TweetContext}
                        id={data.id}
                        body={data.body}
                        createdAt={data.createAt}
                        userId={data.author.uid}
                        likeCount={data.likeCount}
                        likedBy={data.likedBy}
                        profileURL={data.author.photoURL}
                        replyCount={data.replyCount}
                        username={data.author.displayName}
                        imageURL={data.imageURL}
                    />
                    <TweetContext.Provider value={{ setTweets, tweets }}>
                        <TweetForm ctx={TweetContext} />
                        <ul>
                            {tweets?.map((reply: any, id: number) => <Tweet
                                ctx={TweetContext}
                                body={reply.body}
                                createdAt={reply.createAt}
                                id={reply.id}
                                likeCount={reply.likeCount}
                                likedBy={reply.likedBy}
                                username={reply.author.displayName}
                                profileURL={reply.author.photoURL}
                                replyCount={reply.replyCount}
                                userId={reply.author.uid}
                                imageURL={reply.imageURL}
                                key={id}
                            />)}
                        </ul>
                    </TweetContext.Provider>
                </div>
            }
        </div>
    </div>
}